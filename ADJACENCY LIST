ADJACENCY LIST


#include <stdio.h>;
#include <stdlib.h>;

struct node {
int vertex;
struct node* next;
};
struct node* createNode(int);

struct Graph {

int numVertices;
struct node** adjLists;
};

// Create a node
struct node* createNode(int v) {
struct node* newNode = malloc(sizeof(struct node));
newNode-&gt;vertex = v;
newNode-&gt;next = NULL;
return newNode;
}

// Create a graph
struct Graph* createAGraph(int vertices) {
struct Graph* graph = malloc(sizeof(struct Graph));
graph-&gt;numVertices = vertices;

graph-&gt;adjLists = malloc(vertices * sizeof(struct node*));

int i;
for (i = 0; i &lt; vertices; i++)
graph-&gt;adjLists[i] = NULL;

return graph;
}

// Add edge

void addEdge(struct Graph* graph, int s, int d) {
// Add edge from s to d
struct node* newNode = createNode(d);
newNode-&gt;next = graph-&gt;adjLists[s];
graph-&gt;adjLists[s] = newNode;

// Add edge from d to s
newNode = createNode(s);
newNode-&gt;next = graph-&gt;adjLists[d];
graph-&gt;adjLists[d] = newNode;
}

// Print the graph
void printGraph(struct Graph* graph) {
int v;
for (v = 0; v &lt; graph-&gt;numVertices; v++) {
struct node* temp = graph-&gt;adjLists[v];
printf(&quot;\n Vertex %d\n: &quot;, v);
while (temp) {
printf(&quot;%d -&gt; &quot;, temp-&gt;vertex);
temp = temp-&gt;next;
}
printf(&quot;\n&quot;);
}
}

int main() {

struct Graph* graph = createAGraph(4);
addEdge(graph, 0, 1);
addEdge(graph, 0, 2);
addEdge(graph, 0, 3);
addEdge(graph, 1, 2);

printGraph(graph);

return 0;
}
